# This is a basic workflow to help you get started with Actions

name: vite-vanilla-deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    build:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Detect package manager
          id: detect-package-manager
          run: |
            if [ -f "${{ github.workspace }}/yarn.lock" ]; then
              echo "manager=yarn" >> $GITHUB_OUTPUT
              echo "command=install" >> $GITHUB_OUTPUT
              echo "runner=yarn" >> $GITHUB_OUTPUT
              exit 0
            elif [ -f "${{ github.workspace }}/package.json" ]; then
              echo "manager=npm" >> $GITHUB_OUTPUT
              echo "command=ci" >> $GITHUB_OUTPUT
              echo "runner=npx --no-install" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "Unable to determine package manager"
              exit 1
            fi
        - name: Setup Node
          uses: actions/setup-node@v4
          with:
            node-version: "18"
            cache: ${{ steps.detect-package-manager.outputs.manager }}
        - name: Restore cache
          uses: actions/cache@v4
          with:
            path: |
              .next/cache
            # Generate a new cache whenever packages or source files change.
            key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
            # If source files changed but packages didn't, rebuild from a prior cache.
            restore-keys: |
              ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
        - name: Install dependencies
          run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        - name: Build project
          run: vite build
          env:
            VITE_API_KEY: ${{ secrets.VITE_PEXELS_KEY }}
    deploy:
      environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }}
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Deploy to GitHub Pages
          id: deployment
          uses: actions/deploy-pages@v4

